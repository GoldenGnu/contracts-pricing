/*
 * Contract Appraisal
 * This is a an api to provide EVE Online pricing based on public contracts. Resulsts are cached for 1 hour. You can download the swagger.json at https://api.swaggerhub.com/apis/bahrmichael/contracts-appraisal/2.0.0/swagger.json
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eve.nikr.net.client.api;

import eve.nikr.net.client.ApiCallback;
import eve.nikr.net.client.ApiClient;
import eve.nikr.net.client.ApiException;
import eve.nikr.net.client.ApiResponse;
import eve.nikr.net.client.Configuration;
import eve.nikr.net.client.Pair;
import eve.nikr.net.client.ProgressRequestBody;
import eve.nikr.net.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eve.nikr.net.client.model.Prices;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricesApi {
    private ApiClient apiClient;

    public PricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPrices
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy (optional, default to false)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPricesCall(Integer typeId, Boolean includePrivate, Boolean bpc, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/prices/{type_id}"
            .replaceAll("\\{" + "type_id" + "\\}", apiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includePrivate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("include_private", includePrivate));
        }

        if (bpc != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bpc", bpc));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPricesValidateBeforeCall(Integer typeId, Boolean includePrivate, Boolean bpc, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling getPrices(Async)");
        }
        

        com.squareup.okhttp.Call call = getPricesCall(typeId, includePrivate, bpc, callback);
        return call;

    }

    /**
     * Get price information for a type id
     * 
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy (optional, default to false)
     * @return Prices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prices getPrices(Integer typeId, Boolean includePrivate, Boolean bpc) throws ApiException {
        ApiResponse<Prices> resp = getPricesWithHttpInfo(typeId, includePrivate, bpc);
        return resp.getData();
    }

    /**
     * Get price information for a type id
     * 
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy (optional, default to false)
     * @return ApiResponse&lt;Prices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prices> getPricesWithHttpInfo(Integer typeId, Boolean includePrivate, Boolean bpc) throws ApiException {
        com.squareup.okhttp.Call call = getPricesValidateBeforeCall(typeId, includePrivate, bpc, null);
        Type localVarReturnType = new TypeToken<Prices>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get price information for a type id (asynchronously)
     * 
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPricesAsync(Integer typeId, Boolean includePrivate, Boolean bpc, final ApiCallback<Prices> callback) throws ApiException {

        com.squareup.okhttp.Call call = getPricesValidateBeforeCall(typeId, includePrivate, bpc, callback);
        Type localVarReturnType = new TypeToken<Prices>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
