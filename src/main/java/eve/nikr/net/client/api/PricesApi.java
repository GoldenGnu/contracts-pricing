/*
 * Contracts Appraisal
 * This is a an api to provide EVE Online pricing based on public contracts. Results are cached as shown in the Expires header. You can download the swagger.json at https://api.swaggerhub.com/apis/rihanshazih/contracts-appraisal/1.2.0/swagger.json
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eve.nikr.net.client.api;

import eve.nikr.net.client.ApiCallback;
import eve.nikr.net.client.ApiClient;
import eve.nikr.net.client.ApiException;
import eve.nikr.net.client.ApiResponse;
import eve.nikr.net.client.Configuration;
import eve.nikr.net.client.Pair;
import eve.nikr.net.client.ProgressRequestBody;
import eve.nikr.net.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eve.nikr.net.client.model.Prices;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricesApi {
    private ApiClient localVarApiClient;

    public PricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPrices
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy. (optional, default to false)
     * @param security Consider only contracts from systems that are in the given security groups. (optional)
     * @param materialEfficiency Consider only contracts with blueprints with a certain material efficiency. Linear regression may be used to calculate prices. (optional)
     * @param timeEfficiency Consider only contracts with blueprints with a certain time efficiency. Linear regression may be used to calculate prices. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getPricesCall(Integer typeId, Boolean includePrivate, Boolean bpc, List<String> security, Integer materialEfficiency, Integer timeEfficiency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/prices/{type_id}"
            .replaceAll("\\{" + "type_id" + "\\}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includePrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_private", includePrivate));
        }

        if (bpc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bpc", bpc));
        }

        if (security != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "security", security));
        }

        if (materialEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("material_efficiency", materialEfficiency));
        }

        if (timeEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_efficiency", timeEfficiency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPricesValidateBeforeCall(Integer typeId, Boolean includePrivate, Boolean bpc, List<String> security, Integer materialEfficiency, Integer timeEfficiency, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling getPrices(Async)");
        }
        

        okhttp3.Call localVarCall = getPricesCall(typeId, includePrivate, bpc, security, materialEfficiency, timeEfficiency, _callback);
        return localVarCall;

    }

    /**
     * Get price information for a type id
     * 
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy. (optional, default to false)
     * @param security Consider only contracts from systems that are in the given security groups. (optional)
     * @param materialEfficiency Consider only contracts with blueprints with a certain material efficiency. Linear regression may be used to calculate prices. (optional)
     * @param timeEfficiency Consider only contracts with blueprints with a certain time efficiency. Linear regression may be used to calculate prices. (optional)
     * @return Prices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prices getPrices(Integer typeId, Boolean includePrivate, Boolean bpc, List<String> security, Integer materialEfficiency, Integer timeEfficiency) throws ApiException {
        ApiResponse<Prices> localVarResp = getPricesWithHttpInfo(typeId, includePrivate, bpc, security, materialEfficiency, timeEfficiency);
        return localVarResp.getData();
    }

    /**
     * Get price information for a type id
     * 
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy. (optional, default to false)
     * @param security Consider only contracts from systems that are in the given security groups. (optional)
     * @param materialEfficiency Consider only contracts with blueprints with a certain material efficiency. Linear regression may be used to calculate prices. (optional)
     * @param timeEfficiency Consider only contracts with blueprints with a certain time efficiency. Linear regression may be used to calculate prices. (optional)
     * @return ApiResponse&lt;Prices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prices> getPricesWithHttpInfo(Integer typeId, Boolean includePrivate, Boolean bpc, List<String> security, Integer materialEfficiency, Integer timeEfficiency) throws ApiException {
        okhttp3.Call localVarCall = getPricesValidateBeforeCall(typeId, includePrivate, bpc, security, materialEfficiency, timeEfficiency, null);
        Type localVarReturnType = new TypeToken<Prices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get price information for a type id (asynchronously)
     * 
     * @param typeId ID of the type to search for (required)
     * @param includePrivate Consider contracts from structures without public access (e.g. nullsec hubs). (optional, default to false)
     * @param bpc Consider only contracts where the given type is a blueprint copy. (optional, default to false)
     * @param security Consider only contracts from systems that are in the given security groups. (optional)
     * @param materialEfficiency Consider only contracts with blueprints with a certain material efficiency. Linear regression may be used to calculate prices. (optional)
     * @param timeEfficiency Consider only contracts with blueprints with a certain time efficiency. Linear regression may be used to calculate prices. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getPricesAsync(Integer typeId, Boolean includePrivate, Boolean bpc, List<String> security, Integer materialEfficiency, Integer timeEfficiency, final ApiCallback<Prices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPricesValidateBeforeCall(typeId, includePrivate, bpc, security, materialEfficiency, timeEfficiency, _callback);
        Type localVarReturnType = new TypeToken<Prices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
